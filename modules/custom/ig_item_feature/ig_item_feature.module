<?php
/**
 * @file
 * Code for the Instragram Item feature.
 */

include_once 'ig_item_feature.features.inc';

/**
 * Implements hook_instagram_process_new().
 */
function ig_item_feature_instagram_process_new($media, $event) {

  // @todo Optimize to only act when media is present.

  // Fetch the event for this interaction.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->fieldCondition('field_event_fetch', 'value', 1, '=')
    ->fieldCondition('field_event_id', 'value', $event['subscription_id'], '=');
    // @todo introduce time based filtering.
  $result = $query->execute();

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    // Iterate on media items and create nodes.
    foreach ($media as $item) {
      $values = array(
        'type' => 'ig',
        'uid' => 0,
        'status' => 1,
        'comment' => 0,
        'promote' => 0,
        'created' => $media['created_time'],
      );
      $entity = entity_create('node', $values);
      $ewrapper = entity_metadata_wrapper('node', $entity);
      $ewrapper->title->set($item['id']);
      $ewrapper->field_ig_caption->set($item['caption']['text']);
      $ewrapper->field_ig_fullname->set($item['user']['full_name']);
      $ewrapper->field_ig_username->set($item['user']['user_name']);
      $ewrapper->field_ig_profile->set($item['user']['profile_picture']);
      $ewrapper->field_ig_item->set($item['images']['standard_resolution']['url']);
      $ewrapper->field_ig_event->set($nids);
      $ewrapper->save();
    }
  }
}


/**
 * Implements hook_field_formatter_info().
 */
function ig_item_feature_field_formatter_info() {
  return array(
    'ig_item_field_event_formatter' => array(
      'label' => t('Remove event'),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ig_item_feature_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  switch($display['type']) {
    case 'ig_item_field_event_formatter':
      foreach ($items as $delta => $item) {
        $argument = arg(1);
        $ref = $item['target_id'];
        if (is_numeric($argument) && $argument === $ref) {
          $element[$delta] = drupal_get_form('ig_item_feature_remove_event_form_' . $entity->nid, $entity->nid, $ref);
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_forms().
 */
function ig_item_feature_forms($form_id, $args) {
  $forms = array();
  if (strpos($form_id, 'ig_item_feature_remove_event_form_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'ig_item_feature_remove_event_form',
      'callback_arguments' => $args,
    );
  }
  return $forms;
}

/**
 * Custom form for publishing an event live.
 */
function ig_item_feature_remove_event_form($form, &$form_state, $item_nid, $event_nid) {
  $form['event_nid'] = array(
    '#type' => 'hidden',
    '#value' => $event_nid,
  );
  $form['item_nid'] = array(
    '#type' => 'hidden',
    '#value' => $item_nid,
  );
  $form['remove_event'] = array(
    '#type' => 'submit',
    '#value' => t('Remove'),
  );
  return $form;
}

/**
 * Custom form callback for ig_item_feature_remove_event_form.
 */
function ig_item_feature_remove_event_form_submit($form, &$form_state) {
  $item = node_load($form_state['values']['item_nid']);
  $item_wrapper = entity_metadata_wrapper('node', $item);
  foreach($item_wrapper->field_ig_event as $delta => $field)  {
    if ($field->nid->value() === $form_state['values']['event_nid']) {
      unset($item_wrapper->field_ig_event[$delta]);
      $item_wrapper->save();
      break;
    }
  }
}
