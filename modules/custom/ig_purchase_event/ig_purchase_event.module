<?php

/**
 * @file
 * Instragram purchase event module.
 */

/**
 * Implements hook_menu().
 */
function ig_purchase_event_menu() {
  $items['create'] = array(
    'title' => 'Create Event',
    'description' => 'Configuration, and testing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ig_purchase_event_form'),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Custom form for event purchasing.
 */
function ig_purchase_event_form($form, &$form_state) {
  global $user;

  $setting = array();
  $setting['stripeform'] = array(
    'pubkey' => variable_get('stripe_test_publishable'),
    'form_selector' => str_replace('_', '-', __FUNCTION__),
  );

  $form['#attached'] = array(
    'js' => array(
      array('data' => $setting, 'type' => 'setting'),
    ),
    'library' => array(
      array('ig_purchase_event', 'stripe'),
    ),
  );

  // Special hidden element for stripe purchasing.
  $form['stripeToken'] = array(
    '#type' => 'hidden',
    '#value' => !empty($form_state['input']['stripeToken']) ? $form_state['input']['stripeToken'] : NULL,
  );

  $form['event'] = array(
    '#type' => 'fieldset',
    '#title' => t('Event Details'),
    '#tree' => FALSE,
  );
  $form['event'] += element_info('fieldset');

  if ($user->uid === 0) {
    $login_link = l(t('Already have an account? Login to purchase!'), 'user/login', array('query' => array('destination' => 'create')));
    $form['login_link'] = array(
      '#markup' => $login_link,
      '#weight' => -1,
    );
    $form['event']['email'] = array(
      '#type' => 'emailfield',
      '#title' => t('Email'),
      '#description' => t('A valid email address. This will be used to create your account and for billing purposes.'),
      '#required' => TRUE,
    );
  }

  $form['event']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Event Name'),
    '#description' => t('A brief title for your event.'),
    '#required' => TRUE,
  );
  $form['event']['hashtag'] = array(
    '#type' => 'textfield',
    '#title' => t('Event Hashtag'),
    '#description' => t('This will be the hashtag your guests use to tag their posts. A hashtags can include  only letters and numbers without spaces.'),
    '#required' => TRUE,
  );

  $form['credit_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit Card Information'),
    '#tree' => FALSE,
  );

  $form['credit_card']['card_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Full Name'),
    '#pre_render' => array('stripeform_remove_name'),
    '#required' => TRUE,
    '#attributes' => array(
      'size' => 20,
      'data-stripe' => 'name',
    ),
  );

  $form['credit_card']['card_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card Number'),
    '#pre_render' => array('stripeform_remove_name'),
    '#required' => TRUE,
    '#attributes' => array(
      'size' => 20,
      'data-stripe' => 'number',
      // http://stackoverflow.com/questions/25163891/when-scan-credit-card-option-is-available-on-ios8-safari/25925195#25925195
      'id' => 'cardNumber',
      'pattern' => '\d*'
    ),
  );

  $form['credit_card']['exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Expiry  Month'),
    '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)),
    '#pre_render' => array('stripeform_remove_name'),
    '#required' => TRUE,
    '#attributes' => array(
      'data-stripe' => 'exp-month',
    ),
    '#empty_option' => t('- Select -'),
  );

  $form['credit_card']['exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Expiry Year'),
    '#options' => array(),
    '#pre_render' => array('stripeform_remove_name'),
    '#required' => TRUE,
    '#attributes' => array(
      'data-stripe' => 'exp-year',
    ),
    '#empty_option' => t('- Select -'),
  );

  $year = date('Y');
  for ($i = $year; $i <= ($year + 10); $i++) {
    $form['credit_card']['exp_year']['#options'][$i] = $i;
  }

  $form['credit_card']['cvc'] = array(
    '#type' => 'textfield',
    '#title' => t('CVC Number'),
    '#pre_render' => array('stripeform_remove_name'),
    '#attributes' => array(
      'size' => 4,
      'data-stripe' => 'cvc',
      'pattern' => '\d*'
    ),
  );

  // Adds our validation at the end of the build process.
  $form['#after_build'][] = 'ig_purchase_event_validation';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * After build function for ig_purchase_event form.
 */
function ig_purchase_event_validation($form) {
  $form['#validate'][] = 'ig_purchase_event_validate';
  $form['#validate'][] = 'ig_purchase_event_validate_form_payment';
  return $form;
}

/**
 * Validation handler for ig_purchase_event form.
 */
function ig_purchase_event_validate($form, &$form_state) {

  global $user;

  // Validate email address.
  if ($user->uid === 0) {
    if (!valid_email_address($form_state['values']['email'])) {
      form_set_error('email', t('You must enter a valid email address.'));
    }
  }
  else {
    $form_state['values']['email'] = $user->mail;
  }

  // Validate event name.
  $name_length = strlen(trim($form_state['values']['name']));
  if ($name_length > 255) {
    form_set_error('name', t('Event name is too long. Shorten it up a bit please.'));
  }
  else if ($name_length < 3) {
    form_set_error('name', t('Event name is too short. Make it a little longer please.'));
  }

    // Validate hashtag.
  if (!preg_match('/^#?[A-Za-z0-9]+$/u', $form_state['values']['hashtag'])) {
    form_set_error('hashtag', t('You must enter a valid hashtag.'));
  }

  // Validate Credit card number.
  if (!ctype_digit($form_state['values']['card_number'])) {
    form_set_error('card_number', t('Credit card number must be a valid number without spaces.'));
  }
  
  // Validate CVC.
  if (strlen($form_state['values']['cvc']) && !ctype_digit($form_state['values']['cvc'])) {
    form_set_error('cvc', t('CVC must be a valid number.'));
  }
}

/**
 * Custom validation function to perform CC processing for stripe token.
 */
function ig_purchase_event_validate_form_payment($form, $form_state) {

  if ($errors = form_get_errors()) {
    return;
  }

  if (($library = libraries_load('stripe')) && !empty($library['loaded'])) {

    $token = $form_state['values']['stripeToken'];
    $amount = 3999;

    // Create the charge on Stripe's servers - this will charge the user's card.
    try {
      $charge = \Stripe\Charge::create([
        "amount" => $amount,
        "currency" => "usd",
        "card" => $token,
        "description" => 'test charge',
        "receipt_email" => $form_state['values']['email'],
      ]);

      $form_state['stripeform_charge'] = $charge;
    }
    catch(\Stripe\Error\Card $e) {

      $body = $e->getJsonBody();
      $err  = $body['error'];

      switch ($err['code']) {
        case 'incorrect_cvc':
          $error_field = 'cvc';
          break;

        default:
          $error_field = 'form';
      }
      watchdog('stripe', $e->getMessage());
      form_set_error($error_field, $e->getMessage());
    }
    catch(\Stripe\Error\InvalidRequest $e) {
      form_set_error('form', t('Something is wrong with your Credit Card information. Please check all the fields and try again.'));
    }
  }
}

/**
 * The ig_purchase_event form submit handler.
 */
function ig_purchase_event_form_submit($form, $form_state) {
  global $user;
  $uid = $user->uid;
  $email = $form_state['values']['email'];

  // Validate if a user exists or if we should create one.
  if (empty($uid)) {
    $uid_from_email = db_select('users')
      ->fields('users', array('uid'))
      ->condition('mail', db_like($email), 'LIKE')
      ->range(0, 1)
      ->execute()
      ->fetchField();
    
    $uid = empty($uid_from_email) ? ig_purchase_event_create_and_login_user($email) : $uid_from_email;
  }

  // Create event content.
  $values = array(
    'type' => 'event',
    'uid' => $uid,
    'status' => 0,
    'comment' => 0,
    'promote' => 0,
  );
  $entity = entity_create('node', $values);
  $ewrapper = entity_metadata_wrapper('node', $entity);
  $ewrapper->title->set(check_plain($form_state['values']['name']));
  $ewrapper->field_event_hashtag->set(str_replace('#', '', $form_state['values']['hashtag']));
  $ewrapper->field_event_payment->set($form_state['values']['stripeToken']);
  $ewrapper->save();

  drupal_set_message('Your event has been successfully created');
  $redirect_path = 'node/' . $ewrapper->getIdentifier();
  if ($user->uid) {
    drupal_goto($redirect_path);
  }
  else {
    drupal_set_message('Please login to your existing account to manage your event');
    drupal_goto('user/login', array('query' => array('destination' => $redirect_path)));
  }
}

function ig_purchase_event_create_and_login_user($email) {
  // Randomly generate password.
  $password = user_password(8);
 
  // Set up the user fields.
  $fields = array(
    'name' => $email,
    'mail' => $email,
    'pass' => $password,
    'status' => 1,
    'init' => 'email address',
    'roles' => array(
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    ),
  );
 
  // The first parameter is left blank so a new user is created
  $account = user_save('', $fields);

  // Manually set the password so it appears in the e-mail.
  $account->password = $fields['pass'];
 
  // Send the e-mail through the user module.
  //drupal_mail('user', 'register_no_approval_required', $email, NULL, array('account' => $account), variable_get('site_mail'));
  _user_mail_notify('register_no_approval_required', $account);
  
  $account = array('uid' => $account->uid);
  user_login_submit(array(), $account);
  
  return $account['uid'];
}

/**
 * Implements hook_library().
 */
function ig_purchase_event_library() {
  $module_path = drupal_get_path('module', 'ig_purchase_event');

  $items['stripe'] = array(
    'title' => t('Stripe'),
    'version' => '2.0',
    'js' => array(
      'https://js.stripe.com/v2/' => array(),
      $module_path . '/ig_purchase_event.js' => array(),
    ),
  );

  return $items;
}
